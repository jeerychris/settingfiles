" Time Wed, Oct 10, 2018 20:12:30
" vim:ts=4:ft=vim:
" Help
" scriptnames              " show vim load path, incluing vimrc
" options                  "

" vundle plugins manager {
" +---------------------------------------------------------------------------------------------+
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.fzf
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Utility
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'ervandew/supertab'

Plugin 'Shougo/neocomplete'

" if has('nvim')
"   Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plugin 'Shougo/deoplete.nvim'
"   Plugin 'roxma/nvim-yarp'
"   Plugin 'roxma/vim-hug-neovim-rpc'
" endif
" let g:python3_host_prog='python'
" let g:deoplete#enable_at_startup = 1

Plugin 'mattn/emmet-vim'

Plugin 'argtextobj.vim'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'wellle/targets.vim'

Plugin 'Townk/vim-autoclose'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'juntinmk/vim-sneak'
Plugin 'easymotion/vim-easymotion'
" beautify status line
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" git 
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'

" theme
Plugin 'tomasr/molokai'
Plugin 'altercation/vim-colors-solarized.git'

" fzf vim plugin
Plugin 'junegunn/fzf.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" see :h vundle for more details or wiki for FAQ
" +---------------------------------------------------------------------------------------------+
" }

" git default vimrc {
" +---------------------------------------------------------------------------------------------+
" Setting some decent VIM settings for programming
set nocompatible                " vi compatible is LAME
set ai                          " set auto-indenting on for programming
set showmatch                   " automatically show matching brackets. works like it does in bbedit.
set vb t_vb=[?5h$<100>[?5l  " turn on the "visual bell" - which is much quieter than the "audio blink"
set ruler                       " show the cursor position all the time
set laststatus=2                " make the last line where the status is two lines deep so you can see status always
set backspace=indent,eol,start  " make that backspace key work the way it should
set showmode                    " show the current mode

" uncomment to set clipboard to unnamed to access the system clipboard under windows
set clipboard=unnamed           

"------------------------------------------------------------------------------
" Only do this part when compiled with support for autocommands.
if has("autocmd")
    "Set UTF-8 as the default encoding for commit messages
    autocmd BufReadPre COMMIT_EDITMSG,MERGE_MSG,git-rebase-todo setlocal fileencodings=utf-8

    "Remember the positions in files with some git-specific exceptions"
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$")
      \           && expand("%") !~ "COMMIT_EDITMSG"
      \           && expand("%") !~ "MERGE_EDITMSG"
      \           && expand("%") !~ "ADD_EDIT.patch"
      \           && expand("%") !~ "addp-hunk-edit.diff"
      \           && expand("%") !~ "git-rebase-todo" |
      \   exe "normal g`\"" |
      \ endif

      autocmd BufNewFile,BufRead *.patch set filetype=diff
      autocmd BufNewFile,BufRead *.diff set filetype=diff

      autocmd Syntax diff
      \ highlight WhiteSpaceEOL ctermbg=red |
      \ match WhiteSpaceEOL /\(^+.*\)\@<=\s\+$/

      autocmd Syntax gitcommit setlocal textwidth=74
endif 

" +---------------------------------------------------------------------------------------------+
" }


" encoding dectection
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1

" enable filetype dectection and ft specific plugin/indent
filetype plugin indent on

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78

"--------
" Vim UI
"--------
" color scheme
set background=dark
colorscheme solarized

" options {
" Broken down into easily includeable segments
" set statusline=%<%F\                     " Filename
" set statusline+=%w%h%m%r                 " Options
" set statusline+=\ [%{&ff}/%Y]            " Filetype
" set statusline+=\ [%{getcwd()}]          " Current dir
" set statusline+=\ (%{strftime(\"%H:%M\ %d/%m/%Y\",getftime(expand(\"%:p\")))})
" set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info

set splitright                  " Puts new vsplit windows to the right of the current
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)

" enable syntax hightlight and completion
syntax on

" highlight current line
" au WinLeave * set nocursorline nocursorcolumn
" au WinEnter * set cursorline cursorcolumn

" search
set incsearch
set hlsearch  
set ignorecase  
set smartcase

" editor settings
set history=1000
set confirm                                                       " prompt when existing from an unsaved file
set mouse=a                                                       " use mouse in all modes
set report=0                                                      " always report number of lines changed                "
set nowrap                                                        " dont wrap lines
set scrolloff=3                                                   " 5 lines above/below cursor when scrolling
set number                                                        " show line numbers
set showcmd                                                       " show typed command in status bar
set title                                                         " show file in titlebar
set matchtime=2                                                   " show matching bracket for 0.2 seconds
set matchpairs+=<:>                                               " specially for html

set showmode            " show the vim mode
" Default Indentation
set autoindent
set smartindent     " indent when
set tabstop=4       " tab width
set softtabstop=4   " backspace
set shiftwidth=4    " indent width

autocmd FileType text setlocal textwidth=79

set foldmarker={,}
set foldlevel=1
set foldmethod=marker

set smarttab
set expandtab       " expand tab to space

set showtabline=0   " disable tab page promps

" uncomment for table edit
" set virtualedit=all

set undodir=~/.vim/undo/
set undofile                " So is persistent undo ...
set undolevels=1000         " Maximum number of changes that can be undone
set undoreload=10000        " Maximum number lines to save for undo on a buffer reload

set wildmenu                " visual autocomplete for command menu
" }


"------------------
" Useful Functions
"------------------
" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
            \ if ! exists("g:leave_my_cursor_position_alone") |
            \     if line("'\"") > 0 && line ("'\"") <= line("$") |
            \         exe "normal g'\"" |
            \     endif |
            \ endif

noremap zl zL
noremap zh zH
noremap H ^
noremap L $

" highlight last inserted text
nnoremap gV `[v`]
nnoremap <space>v <C-V>
noremap Y y$

nnoremap U <C-R>
nnoremap <space><space> @:

" Most prefer to toggle search highlighting rather than clear the current
" search results. To clear search highlighting rather than toggle it on
" and off, add the following to your .vimrc.before.local file:
nmap <silent> <leader><space> :nohlsearch<CR>


" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" visual searching :search for visually highlighted text
vmap * y/<C-R>"<CR>

" If you prefer that functionality, add the following to your
" .vimrc.before.local file:
"   let g:spf13_no_easyWindows = 1
if !exists('g:spf13_no_easyWindows')
    map <C-J> <C-W>j
    map <C-K> <C-W>k
    map <C-L> <C-W>l
    map <C-H> <C-W>h
    map <C-P> <C-W>p
endif
noremap gw <C-w>

" display RGB colour under the cursor eg 136 
nmap <leader>c :hi Normal ctermbg=<c-r>=expand("<cword>")<cr><cr>

" +-------------------------plugins specific------------------------+ {
" Nerdtree, Tagbar
map <space>1 :NERDTreeToggle<CR>
map <space>2 :TagbarToggle<CR>

" fzf
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-h': 'vsplit' }

" autoclose
let g:AutoClosePairs_add="<>"

" neocomplete, use deoplete instead {
"
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
" }

" airline {
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1 
let g:airline_theme='hybrid'
let g:hybrid_custom_term_colors = 1

let g:airline_left_sep='>'
let g:airline_right_sep='<'
let g:airline_inactive_collapse=1
let g:airline_detect_modified=1
let g:airline_inactive_alt_sep=1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.whitespace = 'Ξ'
" }

" sneak
let g:sneak#label=0
let g:sneak#f_reset = 1
let g:sneak#t_reset = 1
let g:sneak#use_ic_scs = 1

" gitgutter
" jump to chang `[c`, `]c`
" stage the hunk with `<Leader>hs`, " undo it with `<Leader>hu`.
" preview: <Leader>hp
" hunk text obj, ic, ac, like cmd vic
set updatetime=4000
let g:gitgutter_max_signs = 500  " default value
autocmd BufWritePost * GitGutter
" +------------------------------plugins-----------------------------------+ }
